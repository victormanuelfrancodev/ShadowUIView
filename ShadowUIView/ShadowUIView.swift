//
//  ShadowUIView.swift
//  ProjectName
//
//  Created by Victor  on 7/29/18.
//  Copyright Â© 2018 Victor. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ShadowUIView : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), shadowColor: UIColor = UIColor(red: 0.145, green: 0.084, blue: 0.084, alpha: 1.000), gradient: CGGradient, radiusView: CGFloat = 3, opacityView: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let strokeColor = UIColor(red: 0.320, green: 0.800, blue: 0.616, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = shadowColor
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Rectangle Drawing
        context.saveGState()
        context.setAlpha(opacityView)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangleRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.02917 + 0.5), y: frame.minY + fastFloor(frame.height * 0.04167 + 0.5), width: fastFloor(frame.width * 0.97500 + 0.5) - fastFloor(frame.width * 0.02917 + 0.5), height: fastFloor(frame.height * 0.94167 + 0.5) - fastFloor(frame.height * 0.04167 + 0.5))
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: radiusView)
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        rectanglePath.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangleRect.midX, y: rectangleRect.minY),
            end: CGPoint(x: rectangleRect.midX, y: rectangleRect.maxY),
            options: [])
        context.endTransparencyLayer()
        context.restoreGState()

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()
    }

}
